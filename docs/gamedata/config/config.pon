#=========================================================================================
# コンフィグ画面
#
# 「設定」の部分で使用するレイヤー、背景画像等を設定して使用してください。
#=========================================================================================
*config_start

#==========================================
# ▼▼ 設定 ここから ▼▼
#==========================================
---
if (tv.system == null) tv.system = {};
tv.system.config = {
  //  背景画像
  bg: "config/config.png",

  // 背景用レイヤー
  baseLay: 26,

  // ボタン用のレイヤー
  btnLay: 27,

  // スライダー用のレイヤー
  sliderLay: 28,

  // スライダーの値を表示するレイヤー
  sliderValueLay: 29,

  // トランジションの時間
  transTime: 200,

  // 各値の最小値・最大値の設定
  // 右に行くほど小さくしたい場合は reverse: true にすること。
  values: {
    // 未読テキストスピードの値一覧
    unreadTextSpeed: { min: 0, max: 50, reverse: true },
    // 既読テキストスピードの値一覧
    readTextSpeed:   { min: 0, max: 50, reverse: true },
    // オートモードスピードの値一覧
    autoModeSpeed:   { min: 0, max: 10000, reverse: true },
    // BGMの音量の値一覧
    bgmVolume:       { min: 0, max: 1, reverse: false },
    // 効果音の音量の値一覧
    seVolume:        { min: 0, max: 1, reverse: false },
    // システム効果音の音量の値一覧
    systemVolume:    { min: 0, max: 1, reverse: false },
  },
};
---
#==========================================
# ▲▲ 設定 ここまで ▲▲
#==========================================

---
var valueToPercent = function(varName, value) {
  var values = tv.system.config.values[varName];
  if (value < values.min) {
    return 0;
  } else {
    var per = (value - values.min) / (values.max - values.min);
    if (values.reverse) {
      return 1.0 - per;
    } else {
      return per;
    }
  }
};
var percentToValue = function(varName, percent) {
  var values = tv.system.config.values[varName];
  var v = (values.max - values.min) * percent;
  if (v < values.min) {
    return values.min;
  } else if (v > values.max) {
    return values.max;
  } else {
    if (values.reverse) {
      return values.max - v;
    } else {
      return v;
    }
  }
};
var mergeObject = function(base, obj) {
  Object.keys(obj).forEach((key) => {
    base[key] = obj[key];
  });
  return base;
};
var exObj = {
  getPercent: {
    unreadTextSpeed:  function() { return valueToPercent("unreadTextSpeed", ponkan.userUnreadTextSpeed); },
    readTextSpeed:    function() { return valueToPercent("readTextSpeed", ponkan.userReadTextSpeed); },
    autoModeSpeed:    function() { return valueToPercent("autoModeSpeed", ponkan.autoModeInterval); },
    bgmVolume:        function() { return valueToPercent("bgmVolume", ponkan.getSoundBuffer("bgm").gvolume); },
    seVolume:         function() { return valueToPercent("seVolume", ponkan.getSoundBuffer("se").gvolume); },
    systemVolume:     function() { return valueToPercent("systemVolume", ponkan.getSoundBuffer("system").gvolume); },
  },
  setPercent: {
    unreadTextSpeed:  function(percent) { ponkan.userUnreadTextSpeed = Math.floor(percentToValue("unreadTextSpeed", percent)); },
    readTextSpeed:    function(percent) { ponkan.userReadTextSpeed = Math.floor(percentToValue("readTextSpeed", percent)); },
    autoModeSpeed:    function(percent) { ponkan.autoModeInterval = Math.floor(percentToValue("autoModeSpeed", percent)); },
    bgmVolume:        function(percent) { ponkan.getSoundBuffer("bgm").gvolume = Math.round(percentToValue("bgmVolume", percent) * 100) / 100; },
    seVolume:         function(percent) { ponkan.getSoundBuffer("se").gvolume = Math.round(percentToValue("seVolume", percent) * 100) / 100; },
    systemVolume:     function(percent) {
      var v = percentToValue("systemVolume", percent);
      ponkan.getSoundBuffer("system1").gvolume = v;
      ponkan.getSoundBuffer("system2").gvolume = v;
      ponkan.getSoundBuffer("system3").gvolume = v;
    },
  },
  getSliderValue: {
    unreadTextSpeed:  function(percent) { return Math.floor(percentToValue("unreadTextSpeed", percent)) + "ms" },
    readTextSpeed:    function(percent) { return Math.floor(percentToValue("readTextSpeed", percent)) + "ms" },
    autoModeSpeed:    function(percent) { return Math.floor(percentToValue("autoModeSpeed", percent)) + "ms" },
    bgmVolume:        function(percent) { return Math.floor(percentToValue("bgmVolume", percent) * 100) + "％" },
    seVolume:         function(percent) { return Math.floor(percentToValue("seVolume", percent) * 100) + "％" },
    systemVolume:     function(percent) { return Math.floor(percentToValue("systemVolume", percent) * 100) + "％" },
  },
  sliderValuePos: {
    unreadTextSpeed:  { x: null, y: 170 + 40 * 0 },
    readTextSpeed:    { x: null, y: 170 + 40 * 1 },
    autoModeSpeed:    { x: null, y: 170 + 40 * 2 },
    bgmVolume:        { x: null, y: 415 + 40 * 0 },
    seVolume:         { x: null, y: 415 + 40 * 1 },
    systemVolume:     { x: null, y: 415 + 40 * 2 }
  },
  updateSliderValueText: function() {
    var sliderLay = ponkan.getLayers({ lay: tv.system.config.sliderLay })[0];
    var sliderValueLay = ponkan.getLayers({ lay: tv.system.config.sliderValueLay })[0];
    var sliderNames = ["unreadTextSpeed", "readTextSpeed", "autoModeSpeed", "bgmVolume", "seVolume", "systemVolume"]
    sliderValueLay.clearText();
    sliderLay.sliders.forEach((slider, index) => {
      var name = sliderNames[index]
      var value = tv.system.config.getSliderValue[name](slider.value);
      var pos = tv.system.config.sliderValuePos[name];
      sliderValueLay.setCharLocate(pos.x, pos.y);
      sliderValueLay.addText(value);
      sliderValueLay.addTextReturn();
    });
  },
};
mergeObject(tv.system.config, exObj);
---


;tempsave num: 0
;historyopt enabled: false, output: false
;rclick enabled: false

# 初期値設定
---
tv.system.config.fadeinTime = tv.system.config.transTime;
tv.system.config.fadeoutTime = tv.system.config.transTime;
---

#==========================================
# 描画処理
#==========================================
*draw
;pretrans

# 背景の設定
;image {
  lay: "&tv.system.config.baseLay",
  file: "&tv.system.config.bg",
  visible: false,
  x: 0,
  y: 0
};
;layopt lay: "&tv.system.config.baseLay", visible: true

# ボタン用レイヤの設定
;layopt lay: "&tv.system.config.btnLay", x: 0, y: 0, width: 1280, height: 720, visible: true
;mesopt lay: "&tv.system.config.btnLay", color: 0x000000, fontsize: 20, lineheight: 20, shadow: false, edge: false, fontfamily: ["GenShinGothic", "monospace"]
;clear lay: "&tv.system.config.btnLay"
;clearbuttons lay: "&tv.system.config.btnLay"
# ボタンをロック
;lockbuttons page: "fore"
;lockbuttons page: "back"
# システムボタンをロック
;locksystembuttons page: "fore"
;locksystembuttons page: "back"
# スライダー用レイヤの設定
;layopt lay: "&tv.system.config.sliderLay", x: 0, y: 0, width: 1280, height: 720, visible: true
;clearsliders lay: "&tv.system.config.sliderLay"
;clear lay: "&tv.system.config.sliderLay"
# スライダー値用レイヤの設定
;layopt lay: "&tv.system.config.sliderValueLay", x: 1105, y: 5, width: 100, height: 720, visible: true
;mesopt {
  lay: "&tv.system.config.sliderValueLay",
  color: 0xFFFFFF, fontsize: 14, lineheight: 14, shadow: false, edge: false, fontfamily: ["GenShinGothic", "monospace"],
  align: "right", margint: 0, marginr: 0, marginb: 0, marginl: 0,
};
;clear lay: "&tv.system.config.sliderValueLay"

# ボタンの設置
;nowait

# 未読スピード
---
tv.x = 433;
tv.y = 170;
tv.varName = "unreadTextSpeed";
---
;call label: "draw_value_slider"

# 既読スピード
---
tv.y = 210;
tv.varName = "readTextSpeed";
---
;call label: "draw_value_slider"

# オートモードスピード
---
tv.y = 250;
tv.varName = "autoModeSpeed";
---
;call label: "draw_value_slider"

# スキップ
---
tv.y = 290
tv.skipAlreadyAlphas = ponkan.canSkipUnreadPart ? [0.5, 0.7, 1] : [1, 1, 1];
tv.skipAllAlphas = ponkan.canSkipUnreadPart ? [1, 1, 1] : [0.5, 0.7, 1];
---
## 既読のみ
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "skipAlreadyReadBtn",
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.skipAlreadyAlphas",
  text: "既読のみ", x: "&tv.x", y: "&tv.y",
  width: 120, height: 24,
  onclick: "ponkan.canSkipUnreadPart = false",
  jump: true, label: "onclick_skip_mode",
};
## すべて
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "skipAllBtn",
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.skipAllAlphas",
  text: "すべて", x: "&tv.x + 130", y: "&tv.y",
  width: 120, height: 24,
  onclick: "ponkan.canSkipUnreadPart = true",
  jump: true, label: "onclick_skip_mode",
};

# BGM
---
tv.y = 415;
tv.varName = "bgmVolume";
---
;call label: "draw_value_slider"

# SE
---
tv.y = 455;
tv.varName = "seVolume";
---
;call label: "draw_value_slider"

# システム
---
tv.y = 495;
tv.varName = "systemVolume";
---
;call label: "draw_value_slider"


# スケーリング
---
tv.y = 608
tv.fullScreenBtnAlphas = tv.fitWindowBtnAlphas = tv.fixedScale1280BtnAlphas = tv.fixedScale1920BtnAlphas = [0.5, 0.7, 1];
if (ponkan.scaleMode == Ponkan.ScaleMode.FULLSCREEN) {
  tv.fullScreenBtnAlphas = [1, 1, 1];
} else if (ponkan.scaleMode == Ponkan.ScaleMode.FIT) {
  tv.fitWindowBtnAlphas = [1, 1, 1];
} else if (ponkan.scaleMode == Ponkan.ScaleMode.FIXED && ponkan.fixedScaleWidth == 1280) {
  tv.fixedScale1280BtnAlphas = [1, 1, 1];
} else if (ponkan.scaleMode == Ponkan.ScaleMode.FIXED && ponkan.fixedScaleWidth == 1920) {
  tv.fixedScale1920BtnAlphas = [1, 1, 1];
}
---
## フルスクリーン
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "fullScreenBtn",
  text: "フルスクリーン", x: "&tv.x", y: "&tv.y",
  width: 170, height: 24,
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.fullScreenBtnAlphas",
  onclick: "ponkan.scaleMode = Ponkan.ScaleMode.FULLSCREEN",
  jump: true, label: "onclick_screen_scale",
};
## ウィンドウサイズ
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "fitWindowBtn",
  text: "ウィンドウサイズ", x: "&tv.x + 180", y: "&tv.y",
  width: 170, height: 24,
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.fitWindowBtnAlphas",
  onclick: "ponkan.scaleMode = Ponkan.ScaleMode.FIT",
  jump: true, label: "onclick_screen_scale",
};
## 1280x720
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "fixedScale1280Btn",
  text: "1280x720", x: "&tv.x + 360", y: "&tv.y",
  width: 120, height: 24,
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.fixedScale1280BtnAlphas",
  onclick: "ponkan.scaleMode = Ponkan.ScaleMode.FIX; ponkan.setFixedScaleSize(1280, 720);",
  jump: true, label: "onclick_screen_scale",
};
## 1920x1080
;textbutton {
  lay: "&tv.system.config.btnLay", btnname: "fixedScale1920Btn",
  text: "1920x1080", x: "&tv.x + 360 + 130", y: "&tv.y",
  width: 120, height: 24,
  bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.fixedScale1920BtnAlphas",
  onclick: "ponkan.scaleMode = Ponkan.ScaleMode.FIX; ponkan.setFixedScaleSize(1920, 1080);",
  jump: true, label: "onclick_screen_scale",
};

# コンフィグ画面の閉じるボタン
;imagebutton {
  lay:       "&tv.system.config.btnLay",
  imagefile: "config/close_button.png",
  x:         1280-30-24,
  y:         23,
  jump:      true,
  label:     "exit"
};

# スライダーの値を表示
- tv.system.config.updateSliderValueText();

# トランジションで表示
;trans method: "crossfade", time: "&tv.system.config.fadeinTime"
;waittrans canskip: false
# 二回目移行のトランジションは瞬時
- tv.system.config.fadeinTime = 0;

*unlock_config_buttons
# ボタンのロックを解除
;unlockbuttons lay: "&tv.system.config.btnLay"
# スライダーのロックを解除
;unlocksliders lay: "&tv.system.config.sliderLay"
# 右クリックで画面を終了
;rclick jump: true, label: "exit", enabled: true
;s

#==========================================
# 値設定のスライダーを設置する
# 事前設定値： tv.y, tv.startX, tv.varName
#==========================================
*draw_value_slider
;nowait
---
  tv.value = tv.system.config.getPercent[tv.varName]();
  var varName = tv.varName;
  tv.onchange = function(value) {
    tv.system.config.setPercent[varName](value);
    tv.system.config.updateSliderValueText();
  };
  tv.onslide = function(value) {
    tv.system.config.updateSliderValueText();
  };
---
;slider {
  lay:    "&tv.system.config.sliderLay",
  x:      "&tv.x",
  y:      "&tv.y",
  value:  "&tv.value",
  onchange: "&tv.onchange",
  onslide:  "&tv.onslide",
  back:   "config/slider-back.png",
  fore:   "config/slider-fore.png",
  button: "config/slider-button.png",
};
;endnowait
;return
;s


#==========================================
# スキップ状態の変更時
#==========================================
*onclick_skip_mode
;if exp: "ponkan.canSkipUnreadPart"
  # 全文スキップが選択された
  ;textbuttonopt {
    lay: "&tv.system.config.btnLay", btnname: "skipAlreadyReadBtn",
    bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
  };
  ;textbuttonopt {
    lay: "&tv.system.config.btnLay", btnname: "skipAllBtn",
    bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
  };
;else
  # 既読のみスキップが選択された
  ;textbuttonopt {
    lay: "&tv.system.config.btnLay", btnname: "skipAlreadyReadBtn",
    bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
  };
  ;textbuttonopt {
    lay: "&tv.system.config.btnLay", btnname: "skipAllBtn",
    bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
  };
;endif
;jump label: "unlock_config_buttons"
;s


#==========================================
# スクリーンスケーリングの変更時
#==========================================
*onclick_screen_scale
;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fullScreenBtn",     bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fitWindowBtn",      bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fixedScale1280Btn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fixedScale1920Btn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [0.5, 0.7, 1.0]
;if exp: "ponkan.scaleMode == Ponkan.ScaleMode.FULLSCREEN"
  ;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fullScreenBtn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
;elsif exp: "ponkan.scaleMode == Ponkan.ScaleMode.FIT"
  ;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fitWindowBtn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
;elsif exp: "ponkan.scaleMode == Ponkan.ScaleMode.FIXED && ponkan.fixedScaleWidth == 1280"
  ;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fixedScale1280Btn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
;elsif exp: "ponkan.scaleMode == Ponkan.ScaleMode.FIXED && ponkan.fixedScaleWidth == 1920"
  ;textbuttonopt lay: "&tv.system.config.btnLay", btnname: "fixedScale1920Btn", bgcolors: [0xFFFFFF, 0xFFFFFF, 0xFFFFFF], bgalphas: [1, 1, 1]
;endif
;jump label: "unlock_config_buttons"
;s


#==========================================
# コンフィグ画面を終わる
#==========================================
*exit
;savesysvar
;tempload num: 0, sound: false, toback: true
;lockbuttons page: "fore"
;lockbuttons page: "back"
;trans method: "crossfade", time: "&tv.system.config.fadeoutTime"
;waittrans canskip: false
;historyopt enabled: true, output: true
;rclick jump: false, call: false, enabled: true
;return
