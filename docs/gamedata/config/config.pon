#=========================================================================================
# コンフィグ画面
#
# 「設定」の部分で使用するレイヤー、背景画像等を設定して使用してください。
#=========================================================================================
*config_start

#==========================================
# ▼▼ 設定 ここから ▼▼
#==========================================
---
if (tv.system == null) tv.system = {};
tv.system.config = {
  //  背景画像
  bg: "config/config.png",

  // 背景用レイヤー
  baseLay: 26,

  // ボタン用レイヤーの一覧
  // ボタン表示用に9レイヤー使用します。
  // カンマ区切りで9レイヤー指定してください。
  btnLayList: [
    27, 28, 29, 30, 31, 32, 33, 34, 35
  ],

  // トランジションの時間
  transTime: 200,

  // ボタンと値の対応
  // 横一列に並んでいる各ボタンと、ボタン押下時の値の対応です。
  // たとえば、
  //    unreadTextSpeed: [ 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0 ],
  // このように設定しているときは、
  // 一番左のボタンを押下すると未読テキストスピードが40、
  // 一番右のボタンを押下すると未読テキストスピードが0に設定されます。
  values: {
    // 未読テキストスピードの値一覧
    unreadTextSpeed: [ 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0 ],
    // 既読テキストスピードの値一覧
    readTextSpeed:   [ 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0 ],
    // オートモードスピードの値一覧
    autoModeSpeed:   [ 10000, 9500, 9000, 8500, 8000, 7500, 7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000, 1500, 1000, 500, 0 ],
    // BGMの音量の値一覧
    bgmVolume:       [ 0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00 ],
    // 効果音の音量の値一覧
    seVolume:        [ 0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00 ],
    // システム効果音の音量の値一覧
    systemVolume:    [ 0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00 ],
  },
};
---
#==========================================
# ▲▲ 設定 ここまで ▲▲
#==========================================


---
var valueToIndex = function(varName, value) {
  var values = tv.system.config.values[varName];
  for (var i = 0; i < values.length; i++) {
    var v1 = values[i];
    if (v1 == value) {
      return i;
    }
  }
  return values.length - 1;
};

var mergeObject = function(base, obj) {
  Object.keys(obj).forEach((key) => {
    base[key] = obj[key];
  });
  return base;
};

var exObj = {
  btnLay: tv.system.config.btnLayList.join(","),

  // 値名とボタン用レイヤーの紐づけ
  btnLayMap: {
    close:           tv.system.config.btnLayList[0],
    unreadTextSpeed: tv.system.config.btnLayList[1],
    readTextSpeed:   tv.system.config.btnLayList[2],
    autoModeSpeed:   tv.system.config.btnLayList[3],
    skipMode:        tv.system.config.btnLayList[4],
    bgmVolume:       tv.system.config.btnLayList[5],
    seVolume:        tv.system.config.btnLayList[6],
    systemVolume:    tv.system.config.btnLayList[7],
    scaleMode:       tv.system.config.btnLayList[8],
  },
  // 値名の一覧
  valueNames: [
    "unreadTextSpeed",
    "readTextSpeed",
    "autoModeSpeed",
    "skipMode",
    "bgmVolume",
    "seVolume",
    "systemVolume",
    "scaleMode",
    "fixedScaleWidth",
    "fixedScaleHeight",
  ],
  getValue: {
    unreadTextSpeed:  function() { return valueToIndex("unreadTextSpeed", ponkan.userUnreadTextSpeed); },
    readTextSpeed:    function() { return valueToIndex("readTextSpeed", ponkan.userReadTextSpeed); },
    autoModeSpeed:    function() { return valueToIndex("autoModeSpeed", ponkan.autoModeInterval); },
    skipMode:         function() { return ponkan.canSkipUnreadPart ? 1 : 0; },
    bgmVolume:        function() { return valueToIndex("bgmVolume", ponkan.getSoundBuffer("bgm").gvolume); },
    seVolume:         function() { return valueToIndex("seVolume", ponkan.getSoundBuffer("se").gvolume); },
    systemVolume:     function() { return valueToIndex("seVolume", ponkan.getSoundBuffer("system").gvolume); },
    scaleMode:        function() { return ponkan.scaleMode; },
    fixedScaleWidth:  function() { return ponkan.fixedScaleWidth; },
    fixedScaleHeight: function() { return ponkan.fixedScaleHeight; },
  },
  setValue: {
    unreadTextSpeed:  function(value) { ponkan.userUnreadTextSpeed = value; },
    readTextSpeed:    function(value) { ponkan.userReadTextSpeed = value; },
    autoModeSpeed:    function(value) { ponkan.autoModeInterval = value; },
    skipMode:         function(value) { ponkan.canSkipUnreadPart = value; },
    bgmVolume:        function(value) { ponkan.getSoundBuffer("bgm").gvolume = value; },
    seVolume:         function(value) { ponkan.getSoundBuffer("se").gvolume = value; },
    systemVolume:     function(value) { ponkan.getSoundBuffer("system").gvolume = value; },
    scaleMode: function(mode, width, height) {
      ponkan.scaleMode = mode;
      if (ponkan.scaleMode === Ponkan3.ScaleMode.FIXED) {
        ponkan.setFixedScaleSize(width, height);
      }
    },
  },
  onSelect: function(varName, index) {
    var value = tv.system.config.values[varName][index];
    // console.log("onSelect", varName, index, value);
    tv.system.config.setValue[varName](value);
    tv.system.config.drawTarget = [varName];
  },
};
mergeObject(tv.system.config, exObj);
---


;tempsave num: 0
;historyopt enabled: false, output: false
;rclick enabled: false

# 初期値設定
---
tv.system.config.drawTarget = [
  "base",
  "initlayers",
  "close",
  "unreadTextSpeed",
  "readTextSpeed",
  "autoModeSpeed",
  "skipMode",
  "bgmVolume",
  "seVolume",
  "systemVolume",
  "scaleMode",
];
tv.system.config.fadeinTime = tv.system.config.transTime;
tv.system.config.fadeoutTime = tv.system.config.transTime;
---

#==========================================
# 描画処理
#==========================================
*draw
;pretrans

# 背景の設定
;if exp: "tv.system.config.drawTarget.indexOf('base') >= 0"
  ;image {
    lay: "&tv.system.config.baseLay",
    file: "&tv.system.config.bg",
    visible: false,
    x: 0,
    y: 0
  }
  ;layopt lay: "&tv.system.config.baseLay", visible: true
;endif

# ボタン用レイヤの設定
;if exp: "tv.system.config.drawTarget.indexOf('initlayers') >= 0"
  ;layopt lay: "&tv.system.config.btnLay", x: 0, y: 0, width: 1280, height: 24, visible: true
  ;mesopt lay: "&tv.system.config.btnLay", color: 0x000000, fontsize: 20, lineheight: 20, color: 0x000000
  ;clear lay: "&tv.system.config.btnLay"
  ;clearbuttons lay: "&tv.system.config.btnLay"
;endif

# ボタンをロック
;lockbuttons page: "fore"
;lockbuttons page: "back"
# システムボタンをロック
;locksystembuttons page: "fore"
;locksystembuttons page: "back"

# ボタンの設置
-tv.startX = 423;


;nowait
# 未読スピード
---
tv.y = 170;
tv.varName = "unreadTextSpeed";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif

# 既読スピード
---
tv.y = 210;
tv.varName = "readTextSpeed";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif

# オートモードスピード
---
tv.y = 250;
tv.varName = "autoModeSpeed";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif

# スキップ
;if exp: "tv.system.config.drawTarget.indexOf('skipMode') >= 0"
  ---
  tv.jump = !(tv.system.config.getValue.skipMode() == 0);
  tv.label = tv.jump ? "draw" : "unlock_config_buttons";
  tv.bgalphas = tv.jump ? [0.5, 0.7, 0.9] : [1, 1, 1];
  ---
  ;layopt lay: "&tv.system.config.btnLayMap.skipMode", x: "&tv.startX", y: 290
  ;clear lay: "&tv.system.config.btnLayMap.skipMode"
  ;clearbuttons lay: "&tv.system.config.btnLayMap.skipMode"
  ;textbutton {
    lay: "&tv.system.config.btnLayMap.skipMode",
    text: "既読のみ", x: 0, y: 0,
    width: 120, height: 24, bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.bgalphas",
    exp:"tv.system.config.setValue.skipMode(0); tv.system.config.drawTarget = ['skipMode'];",
    jump: "&tv.jump", label: "&tv.label",
  }
  ---
  tv.jump = !(tv.system.config.getValue.skipMode() == 1);
  tv.label = tv.jump ? "draw" : "unlock_config_buttons";
  tv.bgalphas = tv.jump ? [0.5, 0.7, 0.9] : [1, 1, 1];
  ---
  ;textbutton {
    lay: "&tv.system.config.btnLayMap.skipMode",
    text: "すべて", x: 130, y: 0,
    width: 120, height: 24, bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.bgalphas",
    exp:"tv.system.config.setValue.skipMode(1); tv.system.config.drawTarget = ['skipMode'];",
    jump: "&tv.jump", label: "&tv.label",
  }
;endif

# BGM
---
tv.y = 415;
tv.varName = "bgmVolume";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif

# SE
---
tv.y = 455;
tv.varName = "seVolume";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif

# システム
---
tv.y = 495;
tv.varName = "systemVolume";
---
;if exp: "tv.system.config.drawTarget.indexOf(tv.varName) >= 0"
  ;call label: "draw_value_buttons"
;endif


### スケーリング
;if exp: "tv.system.config.drawTarget.indexOf('scaleMode') >= 0"
  ---
  tv.jump = !(tv.system.config.getValue.scaleMode() === Ponkan3.ScaleMode.FULLSCREEN);
  tv.label = tv.jump ? "draw" : "unlock_config_buttons";
  tv.bgalphas = tv.jump ? [0.5, 0.7, 0.9] : [1, 1, 1];
  tv.exp = "tv.system.config.setValue.scaleMode(Ponkan3.ScaleMode.FULLSCREEN); tv.system.config.drawTarget = ['scaleMode'];";
  ---
  ;layopt lay: "&tv.system.config.btnLayMap.scaleMode", x: "&tv.startX", y: 608
  ;clear lay: "&tv.system.config.btnLayMap.scaleMode"
  ;clearbuttons lay: "&tv.system.config.btnLayMap.scaleMode"
  ;textbutton {
    lay: "&tv.system.config.btnLayMap.scaleMode",
    text: "フルスクリーン", x: 0, y: 0,
    width: 170, height: 24, bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.bgalphas",
    exp: "&tv.exp", jump: "&tv.jump", label: "&tv.label",
  }
  ---
  tv.jump = !(tv.system.config.getValue.scaleMode() === Ponkan3.ScaleMode.FIT);
  tv.label = tv.jump ? "draw" : "unlock_config_buttons";
  tv.bgalphas = tv.jump ? [0.5, 0.7, 0.9] : [1, 1, 1];
  tv.exp = "tv.system.config.setValue.scaleMode(Ponkan3.ScaleMode.FIT); tv.system.config.drawTarget = ['scaleMode'];";
  ---
  ;textbutton {
    lay: "&tv.system.config.btnLayMap.scaleMode",
    text: "ウィンドウサイズ", x: 180, y: 0,
    width: 190, height: 24, bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.bgalphas",
    exp: "&tv.exp", jump: "&tv.jump", label: "&tv.label",
  }
  ---
  tv.resolutions = [
    [1280, 720],
    [1920, 1080]
  ];
  ---
  ;for loops: "&tv.resolutions.length", indexvar: "i"
    ---
    tv.x = 380 + (130 * tv.i);
    tv.width = tv.resolutions[tv.i][0];
    tv.height = tv.resolutions[tv.i][1];
    tv.text = `${tv.width}x${tv.height}`;
    tv.jump = !(tv.system.config.getValue.fixedScaleWidth() === tv.width &&
                tv.system.config.getValue.scaleMode() === Ponkan3.ScaleMode.FIXED);
    tv.label = tv.jump ? "draw" : "unlock_config_buttons";
    tv.bgalphas = tv.jump ? [0.5, 0.7, 0.9] : [1, 1, 1];
    tv.exp = `tv.system.config.setValue.scaleMode(Ponkan3.ScaleMode.FIXED, ${tv.width}, ${tv.height});
              tv.system.config.drawTarget = ["scaleMode"];`;
    ---
    ;textbutton {
      lay: "&tv.system.config.btnLayMap.scaleMode",
      text: "&tv.text", x: "&tv.x", y: 0,
      width: 120, height: 24, bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"], bgalphas: "&tv.bgalphas",
      exp: "&tv.exp", jump: "&tv.jump", label: "&tv.label",
    }
  ;endfor
;endif


# コンフィグ画面の閉じるボタン
;layopt lay: "&tv.system.config.btnLayMap.close", x: 0, y: 0, width: 1280, height: 100
;imagebutton {
  lay:       "&tv.system.config.btnLayMap.close",
  imagefile: "config/close_button.png",
  x:         1280-30-24,
  y:         23,
  jump:      true,
  label:     "exit"
}

# トランジションで表示
;trans method: "crossfade", time: "&tv.system.config.fadeinTime"
;waittrans canskip: false
# 二回目移行のトランジションは瞬時
-tv.system.config.fadeinTime = 0;
# 二回目以降の描画対象を削減
-tv.system.config.drawTarget = [];

*unlock_config_buttons
# ボタンのロックを解除
;unlockbuttons lay: "&tv.system.config.btnLay"
# 右クリックで画面を終了
;rclick jump: true, label: "exit", enabled: true
;s


#==========================================
# 値設定のボタンを設置する
# 事前設定値：tv.startX, tv.varName
#==========================================
*draw_value_buttons
;nowait
---
tv.x = tv.startX;
tv.lay = tv.system.config.btnLayMap[tv.varName];
---
;layopt lay: "&tv.lay", x: 0, y: "&tv.y", visible: true
;clear lay: "&tv.lay"
;clearbuttons lay: "&tv.lay"
;for loops: 21, indexvar: "i"
  ---
  tv.exp = `tv.system.config.onSelect("${tv.varName}", ${tv.i});`;
  var value = tv.system.config.getValue[tv.varName]();
  if (value == tv.i) {
    tv.bgalphas = [1, 1, 1];
    tv.jump = false;
    tv.label = null;
  } else {
    tv.bgalphas = [0.5, 0.7, 0.9];
    tv.jump = true;
    tv.label = "draw";
  }
  ---
  ;textbutton {
    lay:    "&tv.lay",
    x:      "&tv.x",
    y:      "0",
    width:  24,
    height: 24,
    bgcolors: ["0xFFFFFF", "0xFFFFFF", "0xFFFFFF"],
    bgalphas: "&tv.bgalphas",
    exp:    "&tv.exp",
    jump:   "&tv.jump",
    label:  "&tv.label",
  }
  -tv.x += 32;
;endfor
;endnowait
;return
;s


#==========================================
# コンフィグ画面を終わる
#==========================================
*exit
;savesysvar
;tempload num: 0, sound: false, toback: true
;lockbuttons page: "fore"
;lockbuttons page: "back"
;trans method: "crossfade", time: "&tv.system.config.fadeoutTime"
;waittrans canskip: false
;historyopt enabled: true, output: true
;rclick jump: false, call: false, enabled: true
;return
